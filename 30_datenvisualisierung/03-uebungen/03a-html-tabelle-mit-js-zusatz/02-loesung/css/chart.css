/* Deine eigenen Chart Styles */

table {
    width: 100%;
    padding: 0.5rem;
    /* Entfernt die weissen feinen Ränder / Border um die Zellen: */
    border-collapse: collapse;
}

thead th {
    padding: 0.25rem;
    background-color: rgba(0,0,0,0.05);
    /* Bold Font Style von Roboto wird für die Titelzeile verwendet: */
    font-weight: 700;
}

/* NEU: Wir geben den Spalten eine einheitliche Breite, damit die Balken
alle dieselbe prozentuale Breite bekommen. Dies gilt nur für die Spalten, die
Zahlen enthalten, nicht für die Spalte "Erwerbsstatus".
Der Pseudo-Selektor :not(first-child) schliesst somit die erste Spalte für die kommende
Definition aus. Wir definieren eine max-width, damit die Spalten nicht breiter als
die angegebene Pixel-Anzahl werden darf.
 */
thead th:not(first-child) {
    max-width: 80px;
}

tbody td {
    padding: 0.25rem;
}

tbody tr:nth-child(even) {
    background-color: rgba(0,0,0,0.025);
}

th {
    /* Die Header Spalten sollen grundsätzlich rechtsbündig ausgerichtet sein */
    text-align: right;
    line-height: 20px;
    vertical-align: middle;
}

/* Damit steuern wir die erste Spalte in der Header-Zeile an, diese wollen wir linksbündig, also eine Ausnahme der Klasse zuvor */
th:first-child {
    text-align: left;
}

/* Hiermit alle Spalten, ausser die erste, in allen Rows (alle <td> Elemente, ob thead oder tbody) */
/* Tipp: Wie das mit nth-child funktioniert, findet ihr hier: https://css-tricks.com/examples/nth-child-tester/ */
td:nth-child(1n+2) {
    text-align: right;
}

/* Icon-Klasse für die SVG-Images */
/* Wir geben dem Icon eine max-width von 20px, das SVG wird sauber auf die Grösse gerendert */
.icon {
    max-width: 20px;
}

/* Die Bälkchen sollen alle 10px Höhe haben, und wir verwenden die Variable für die Farbe Dunkelgrau */
/* Diese Farbvariabeln sind in theme.css definiert */
.bar {
    height: 5px;
    background-color: var(--color-grey-dark);
    margin: 5px 0;
}

/* ZUSATZÜBUNG */

/* Mouseover */

/* Mouseover-Effekt für die <tr> (Table Row / Tabellenreihe)*/
/* Hinweis: das :not(:first-child) ist gesetzt, um die erste (Header-Zeile) auszulassen. */
/* Wir könnten auch einfach nur tr:hover nehmen, wenn wir die Header-Zeile ebenfalls ansprechen wollen... */
tr:not(:first-child):hover {
    background-color: var(--color-highlight);
    text-decoration: underline;
}

/* Wir defnieren 1 Sekunde für die Transition für die spezifischen verfügbaren CSS-Styles (hier: background-color), die auf <tr>-Elemente angewendet werden */
tr {
    /* transition: all 1s; <- diese Eigenschaft würde die Transition für ALLE CSS-Eigenschaften des <tr> aktivieren. */
    transition: background-color 1s; /* So ist die Transition nur für die background-color gültig, also wird diese gefadet */
}

tr {
    transition: background-color 1s;
}

/* 
Animation 
(von https://animista.net/play/entrances/slide-in/slide-in-left)
*/

.slide-in-left {
    -webkit-animation: slide-in-left 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
            animation: slide-in-left 0.5s cubic-bezier(0.250, 0.460, 0.450, 0.940) both;
}

/* ----------------------------------------------
 * Generated by Animista on 2021-5-17 17:2:38
 * Licensed under FreeBSD License.
 * See http://animista.net/license for more info. 
 * w: http://animista.net, t: @cssanimista
 * ---------------------------------------------- */

/**
 * ----------------------------------------
 * animation slide-in-left
 * ----------------------------------------
 */
@-webkit-keyframes slide-in-left {
  0% {
    -webkit-transform: translateX(-1000px);
            transform: translateX(-1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
  }
}
@keyframes slide-in-left {
  0% {
    -webkit-transform: translateX(-1000px);
            transform: translateX(-1000px);
    opacity: 0;
  }
  100% {
    -webkit-transform: translateX(0);
            transform: translateX(0);
    opacity: 1;
  }
}
